package com.sharat.datastructures.all.leetcode;

public class LongestPalindromicSubstring {

	public String longestPalindrome(String s) {
		int n = s.length();
		int maxValue = Integer.MIN_VALUE;
		String str;
		String result = "";
		for (int i = 0; i < n; i++) {
			for (int j = n; j > i && (j - i > maxValue); j--) {
				str = s.substring(i, j);
				if (isPalindrom(str)) {
					if (maxValue < str.length()) {
						maxValue = str.length();
						result = str;
					}
					break;
				}
			}
		}

		return result;
	}

	public boolean isPalindrom(String str) {
		int n = str.length();
		if (n == 1) {
			return true;
		}

		int l = n / 2;
		int index = 0;
		while (index <= l) {
			if (str.charAt(index) != str.charAt(n - 1 - index)) {
				return false;
			}

			index++;
		}

		return true;
	}

	public static void main(String[] args) {
		LongestPalindromicSubstring lps = new LongestPalindromicSubstring();
		System.out.println(lps.longestPalindrome
	}
}
